diff --git a/keras_dropout.py b/keras_dropout.py
index 801df39..445b61a 100644
--- a/keras_dropout.py
+++ b/keras_dropout.py
@@ -12,9 +12,10 @@ import wandb
 run = wandb.init()
 config = run.config
 config.optimizer = "adam"
-config.epochs = 50
+config.epochs = 30
 config.dropout = 0.4
-config.hidden_nodes = 100
+config.hidden_nodes = 200
+config.batch_size=300
 
 # load data
 (X_train, y_train), (X_test, y_test) = mnist.load_data()
@@ -38,9 +39,25 @@ model=Sequential()
 model.add(Flatten(input_shape=(img_width,img_height)))
 model.add(Dropout(config.dropout))
 model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+
 model.add(Dropout(config.dropout))
 model.add(Dense(num_classes, activation='softmax'))
-model.compile(loss='categorical_crossentropy', optimizer=config.optimizer,
+model.compile(loss='categorical_crossentropy', optimizer=config.optimizer,batch_size=config.batch_size,
                     metrics=['accuracy'])
 
 
diff --git a/keras_perceptron.py b/keras_perceptron.py
index 71abdcd..27b1964 100644
--- a/keras_perceptron.py
+++ b/keras_perceptron.py
@@ -13,8 +13,9 @@ import wandb
 run = wandb.init()
 config = run.config
 config.optimizer = "adam"
-config.epochs = 10
+config.epochs = 30
 config.hidden_nodes = 100
+config.batch_size=300
 
 # load data
 (X_train, y_train), (X_test, y_test) = mnist.load_data()
@@ -40,11 +41,27 @@ num_classes = y_train.shape[1]
 model = Sequential()
 model.add(Flatten(input_shape=(img_width, img_height)))
 model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+
 model.add(Dense(num_classes, activation='softmax'))
 model.compile(loss='categorical_crossentropy', optimizer=config.optimizer,
               metrics=['accuracy'])
 model.summary()
 # Fit the model
-model.fit(X_train, y_train, validation_data=(X_test, y_test),
+model.fit(X_train, y_train, validation_data=(X_test, y_test),batch_size=config.batch_size,
           epochs=config.epochs,
           callbacks=[WandbCallback(data_type="image", labels=labels)])
